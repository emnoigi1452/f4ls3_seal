package me.ductrader.javapractice;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

class Main {
    public static boolean isADupe(List<Integer> dupeList, int num) {
        boolean bool = false;
        for(Integer d: dupeList) {
            if(d == num) {
                bool = true;
                break;
            }
        }
        return bool;
    }
    public static List<Integer> dupeCheck(List<Integer> list) {
        List<Integer> dupeList = new ArrayList<Integer>();
        for(int k = 0; k < list.size(); k++) {
            if(!(isADupe(dupeList, list.get(k)))) {
                for(int j = k + 1; j < list.size(); j++) {
                    if(list.get(k).equals(list.get(j))) {
                        dupeList.add(list.get(k));
                        break;
                    }
                }
            }
        }
        return dupeList;
    }
    public static boolean isNumeric(String s) {
        try {
            Integer.parseInt(s);
        } catch(NumberFormatException e) {
            return false;
        }
        return true;
    }
    public static boolean validArray(String[] array) {
        for(String s: array) {
            if(!(isNumeric(s))) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        File f1 = new File("array.in");
        File f2 = new File("duplicate.out");
        File f3 = new File("instructions.txt");
        if(!(f1.exists())) {
            System.out.println("Input file doesn't exist!");
            try {
                f1.createNewFile();
                System.out.println("New input file created!");
                System.out.println("Restarting program...");
                System.exit(-1);
            } catch(IOException e) {
                System.out.println("An error occurred!");
                e.printStackTrace();
                System.out.println("Restarting program...");
                System.exit(-1);
            }
        } else if(!(f2.exists())) {
            System.out.println("Output file doesn't exist!");
            try {
                f2.createNewFile();
                System.out.println("Output file generated!");
                System.out.println("Restarting program...");
                System.exit(-1);
            } catch(IOException e) {
                System.out.println("An error occurred!");
                e.printStackTrace();
                System.out.println("Restarting program...");
                System.exit(-1);
            }
        } else {
            try {
                int ac = 0; int line = 1; // ac : Array id - // line : line index of file array.in
                Scanner sc = new Scanner(f1);
                FileWriter writer = new FileWriter(f3); FileWriter writer2 = new FileWriter(f2);
                // Instructions for input on file no.1 - Input file
                // Generated by the program itself
                writer.write("# Array input file, input your array here\n");
                writer.write("# Note : Each element of the array must be separated with a space\n");
                writer.write("# Each line will be counted as a separated array\n\n");
                writer.flush(); writer.close();
                System.out.println("Files are fully generated with instructions, begin scanning...");
                while(sc.hasNextLine()) {
                    List<Integer> l = new ArrayList<Integer>();
                    int invEl = 0; // invEl : Invalid inputs (String, Boolean, etc...)
                    ac++; // Add index by 1
                    String list = sc.nextLine();
                    if(list.isEmpty()) {
                        writer2.write("Array #" + ac + " - Array is empty!\n\n\n");
                    } else {
                        String[] sp = list.split(" ");
                        if(!(validArray(sp))) {
                            writer2.write("Array #" + ac + " - Array contains invalid characters!\n");
                            writer2.write("Given array: " + Arrays.toString(sp) + "\n\n\n");
                        } else {
                            for(String d: sp) {
                                if(isNumeric(d)) {
                                    l.add(Integer.parseInt(d));
                                } else {
                                    invEl++;
                                }
                            }
                            List<Integer> dupes = dupeCheck(l);
                            writer2.write("Array #" + ac + " - " + l + "\n");
                            writer2.write("Size: " + l.size() + " elements\n");
                            writer2.write("Invalid elements in input file: " + invEl + " elements\n");
                            writer2.write("Duplicated values in array: ");
                            if(dupes.isEmpty()) {
                                writer2.write("None\n\n\n");
                            } else {
                                writer2.write("\n");
                                for(Integer d: dupes) {
                                    writer2.write(d + " is a duplicated value!\n");
                                }
                                writer2.write("\n\n");
                            }
                        }
                    }
                }
                writer2.flush();
                writer2.close();
            } catch(IOException e) {
                System.out.println("Error occurred!");
                e.printStackTrace();
                System.out.println("Restarting program...");
                System.exit(-1);
            }
        }
        System.out.println("Process complete, check " + f2.getName() + " for output details...");
        System.out.println("Input: " + f1.getAbsolutePath());
        System.out.println("Output: " + f2.getAbsolutePath());
    }
}
